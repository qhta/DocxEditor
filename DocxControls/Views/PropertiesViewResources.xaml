<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:DocxControls.Views"
                    xmlns:helpers="clr-namespace:DocxControls.Helpers"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
                    xmlns:viewModels="clr-namespace:DocxControls.ViewModels">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="pack://application:,,,/DocxControls;component/Views/CustomToolTipStyle.xaml"/>
    <ResourceDictionary Source="pack://application:,,,/DocxControls;component/Views/CustomComboBoxStyle.xaml"/>
  </ResourceDictionary.MergedDictionaries>
  <Thickness x:Key="PropertyPadding">5,0,5,0</Thickness>
  <helpers:PropertyValueConverter x:Key="PropertyValueConverter" />
  <helpers:TypeNameConverter x:Key="TypeNameConverter"/>
  <helpers:EnumValuesConverter x:Key="EnumValuesConverter"/>
  <DataTemplate x:Key="TextTemplate" DataType="local:PropertyViewModel" >
    <!--<syncfusion:SfMaskedEdit 
      Text="{Binding Value, Converter={StaticResource PropertyValueConverter}, UpdateSourceTrigger=LostFocus}" 
      Watermark="{Binding Watermark}"
      Mask="{Binding EditMask}"
      MaskType = "RegEx"
      IsReadOnly="{Binding IsReadOnly}"
      TextWrapping="WrapWithOverflow"
      AcceptsReturn="False">
      <TextBox.Style>
        <Style TargetType="TextBox">
          <Setter Property="BorderThickness" Value="0" />
          <Style.Triggers>
            <DataTrigger Binding="{Binding IsReadOnly}" Value="True">
              <Setter Property="Foreground" Value="LightGray"/>
            </DataTrigger>
          </Style.Triggers>
        </Style>
      </TextBox.Style>
    </syncfusion:SfMaskedEdit>-->
    <xctk:WatermarkTextBox 
      Text="{Binding Value, Converter={StaticResource PropertyValueConverter}, UpdateSourceTrigger=LostFocus}" 
      Watermark="{Binding Watermark}"
      IsReadOnly="{Binding IsReadOnly}"
      Padding="{StaticResource PropertyPadding}"
      TextWrapping="WrapWithOverflow">
      <TextBox.Style>
        <Style TargetType="TextBox">
          <Setter Property="BorderThickness" Value="0" />
          <Style.Triggers>
            <DataTrigger Binding="{Binding IsReadOnly}" Value="True">
              <Setter Property="Foreground" Value="LightGray"/>
            </DataTrigger>
          </Style.Triggers>
        </Style>
      </TextBox.Style>
    </xctk:WatermarkTextBox>
  </DataTemplate>

  <DataTemplate x:Key="CheckBoxTemplate" DataType="local:PropertyViewModel">
    <CheckBox 
       IsChecked="{Binding AsBoolean, UpdateSourceTrigger=PropertyChanged}"
       IsThreeState="{Binding IsThreeState}"
       Margin="{StaticResource PropertyPadding}"/>
  </DataTemplate>
  <DataTemplate x:Key="ComboBoxTemplate" DataType="local:PropertyViewModel">
    <ComboBox 
       SelectedValue="{Binding SelectedEnum, UpdateSourceTrigger=PropertyChanged}"
       ItemsSource="{Binding EnumValues}"
       DisplayMemberPath="Caption"
       SelectedValuePath="Value"
       Padding="{StaticResource PropertyPadding}">
    </ComboBox>
  </DataTemplate>
  <DataTemplate x:Key="CheckBoxComboBoxTemplate" DataType="local:PropertyViewModel">
    <local:CheckBoxComboBox 
       Text="{Binding SelectedEnum, Converter={StaticResource PropertyValueConverter},
       UpdateSourceTrigger=PropertyChanged}"
       ItemsSource="{Binding EnumValues}"
       DisplayMemberPath="Caption"
       SelectedValuePath="Value"
       Padding="{StaticResource PropertyPadding}">
    </local:CheckBoxComboBox>
  </DataTemplate>
  <!--<DataTemplate x:Key="ObjectPropertyViewComboBoxTemplate" DataType="local:ObjectPropertyViewModel">
    <local:ObjectViewComboBox 
      Text="{Binding ObjectViewModel.ModeledObject, Converter={StaticResource PropertyValueConverter},
       UpdateSourceTrigger=Default}"
      ItemsSource="{Binding ObjectViewModel.ObjectProperties.Items}"
    >
    </local:ObjectViewComboBox>
  </DataTemplate>-->
  <DataTemplate x:Key="ObjectViewComboBoxTemplate" DataType="local:PropertyViewModel">
    <local:ObjectViewComboBox 
       Text="{Binding ObjectViewModel.ModeledObject, Converter={StaticResource PropertyValueConverter},
       UpdateSourceTrigger=Default}"
       ItemsSource="{Binding ObjectViewModel.ObjectProperties.Items}"
       >
    </local:ObjectViewComboBox>
  </DataTemplate>
  <helpers:PropertyValueTemplateSelector 
     x:Key="PropertyValueTemplateSelector"
     TextTemplate="{StaticResource TextTemplate}"
     CheckBoxTemplate="{StaticResource CheckBoxTemplate}" 
     ComboBoxTemplate="{StaticResource ComboBoxTemplate}"
     FlagsComboBoxTemplate="{StaticResource CheckBoxComboBoxTemplate}"
     ObjectViewComboBoxTemplate="{StaticResource ObjectViewComboBoxTemplate}"
     />

  <DataTemplate x:Key="PropertyCaptionTemplate" DataType="local:PropertyViewModel" >
    <TextBlock 
       Text="{Binding Caption}" 
       Padding="{StaticResource PropertyPadding}">
      <TextBlock.Style>
        <Style TargetType="TextBlock">
          <Setter Property="Background" Value="LightGray"/>
          <Setter Property="Foreground" Value="Black"/>
          <Style.Triggers>
            <DataTrigger Binding="{Binding IsObsolete}" Value="True">
              <Setter Property="Foreground" Value="DarkSlateGray"/>
            </DataTrigger>
          </Style.Triggers>
        </Style>
      </TextBlock.Style>
      <TextBlock.ToolTip>
        <ToolTip Style="{StaticResource CustomToolTipStyle}">
          <local:CustomToolTipView
             DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ToolTip}}" />
        </ToolTip>
      </TextBlock.ToolTip>
    </TextBlock>
  </DataTemplate>

  <DataTemplate x:Key="PropertyTypeTemplate" DataType="local:PropertyViewModel" >
    <TextBlock 
      Text="{Binding Type, Converter={StaticResource TypeNameConverter}}" 
      Padding="{StaticResource PropertyPadding}">
      <TextBlock.Style>
        <Style TargetType="TextBlock">
          <Setter Property="Background" Value="LightGray"/>
          <Setter Property="Foreground" Value="Black"/>
          <Style.Triggers>
            <DataTrigger Binding="{Binding IsObsolete}" Value="True">
              <Setter Property="Foreground" Value="DarkSlateGray"/>
            </DataTrigger>
          </Style.Triggers>
        </Style>
      </TextBlock.Style>
      <!--<TextBlock.ToolTip>
        <ToolTip Style="{StaticResource CustomToolTipStyle}">
          <local:CustomToolTipView
            DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ToolTip}}" />
        </ToolTip>
      </TextBlock.ToolTip>-->
    </TextBlock>
  </DataTemplate>

  <DataTemplate x:Key="ObjectTypeNameTemplate" DataType="local:ObjectViewModel" >
    <TextBlock 
      Text="{Binding ObjectTypeName}" 
      Padding="{StaticResource PropertyPadding}">
      <TextBlock.Style>
        <Style TargetType="TextBlock">
          <Setter Property="Background" Value="LightGray"/>
          <Setter Property="Foreground" Value="Black"/>
          <Style.Triggers>
            <DataTrigger Binding="{Binding IsObsolete}" Value="True">
              <Setter Property="Foreground" Value="DarkSlateGray"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsSelected}" Value="True">
              <Setter Property="Foreground" Value="Blue"/>
            </DataTrigger>
          </Style.Triggers>
        </Style>
      </TextBlock.Style>
      <!--<TextBlock.InputBindings>
        <MouseBinding Gesture="LeftClick" Command="{Binding DataContext.SelectItemCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}" CommandParameter="{Binding}" />
      </TextBlock.InputBindings>-->
      <TextBlock.ToolTip>
        <ToolTip Style="{StaticResource CustomToolTipStyle}">
          <local:CustomToolTipView
            DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ToolTip}}" />
        </ToolTip>
      </TextBlock.ToolTip>
    </TextBlock>
  </DataTemplate>


  <DataTemplate x:Key="NewMemberTypeTemplate" DataType="{x:Type viewModels:ObjectMemberViewModel}">
    <ComboBox
      SelectedValue="{Binding MemberType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
      ItemsSource="{Binding DataContext.ParentStory.ObjectMembers.MemberTypes, RelativeSource={RelativeSource AncestorType=DataGrid}}"
      DisplayMemberPath="Name"
      Padding="{StaticResource PropertyPadding}">
    </ComboBox>
  </DataTemplate>

  <helpers:PropertyCaptionTemplateSelector 
    x:Key="PropertyCaptionTemplateSelector"
    CaptionTemplate="{StaticResource PropertyCaptionTemplate}"
    ObjectTemplate="{StaticResource ObjectTypeNameTemplate}"
    NewMemberTypeTemplate="{StaticResource NewMemberTypeTemplate}"
  />

  <Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}" TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="Silver" BorderBrush="Black" BorderThickness="1"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="DataGridRowHeader">
    <Setter Property="Background" Value="Silver" />
    <Setter Property="Margin" Value="0,-1,0,0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="MinWidth" Value="20" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="DataGridRowHeader">
          <Border 
            x:Name="HeaderBorder" 
            Background="{TemplateBinding Background}"
            BorderBrush="Black" BorderThickness="1,1,1,1"
             >
            <ContentPresenter 
              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="HeaderBorder" Property="Background" Value="LightBlue"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="HeaderBorder" Property="Background" Value="DarkGray" />
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=DataGridRow}, Path=IsSelected}" Value="True">
              <Setter TargetName="HeaderBorder" Property="Background" Value="DodgerBlue" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <Style TargetType="DataGridColumnHeader">
    <Setter Property="Background" Value="Silver" />
    <Setter Property="Margin" Value="-1,0,0,0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="DataGridColumnHeader">
          <Border 
            x:Name="HeaderBorder" 
            Background="{TemplateBinding Background}" 
            BorderBrush="Black" BorderThickness="1,1,1,1"
            >
            <Grid>
              <ContentPresenter x:Name="SortIndicator" 
                                Content="{TemplateBinding SortDirection}" 
                                HorizontalAlignment="Right" 
                                VerticalAlignment="Center" 
                                Margin="5,0,5,0" />
              <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="HeaderBorder" Property="Background" Value="LightBlue"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="HeaderBorder" Property="Background" Value="DarkGray" />
            </Trigger>
            <Trigger Property="SortDirection" Value="Ascending">
              <Setter TargetName="SortIndicator" Property="Content" Value="▲" />
            </Trigger>
            <Trigger Property="SortDirection" Value="Descending">
              <Setter TargetName="SortIndicator" Property="Content" Value="▼" />
            </Trigger>
            <Trigger Property="SortDirection" Value="{x:Null}">
              <Setter TargetName="SortIndicator" Property="Content" Value="" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <DataTemplate x:Key="NumberingRowHeaderTemplate">
    <TextBlock 
        TextAlignment="Center"
        Text="{Binding RelativeSource={RelativeSource AncestorType=DataGridRow}, Path=Header}" />
  </DataTemplate>
</ResourceDictionary>
